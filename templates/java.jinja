package com.raytheon.uf.edex.ooi.cassandra.tables;

import com.google.common.primitives.Ints;
import com.google.common.primitives.Longs;
import com.google.common.primitives.Doubles;
import com.raytheon.uf.edex.ooi.cassandra.DoubleBufferSerializer;
import com.raytheon.uf.edex.ooi.cassandra.LongBufferSerializer;
import com.raytheon.uf.edex.ooi.cassandra.IntBufferSerializer;
import com.raytheon.uf.edex.ooi.cassandra.BufferUtils;
import com.raytheon.uf.edex.ooi.cassandra.CassandraParticle;
import com.raytheon.uf.edex.ooi.cassandra.DataParticleJson;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.springframework.data.annotation.Transient;
import org.springframework.data.cassandra.mapping.CassandraType;
import org.springframework.data.cassandra.mapping.Column;
import org.springframework.data.cassandra.mapping.Table;

import java.nio.ByteBuffer;
import java.util.List;
import java.math.BigInteger;

import static com.datastax.driver.core.DataType.Name.*;

@Table(value = "{{table.name}}")
public class {{table.classname}} extends CassandraParticle {

    @Transient
    private String stream_name = "{{table.name}}";

    // Cassandra columns
{% for column in table.columns %}
    private {{column.javatype}} {{column.javaname}};
{% endfor %}


    public void fill(DataParticleJson particle) {
        super.fill(particle);
{% for column in table.columns %}
{% if column.fillable %}
    {% if column.javatype == 'ByteBuffer' %}
        // Numeric list data is converted to msgpack and placed into a ByteBuffer
        this.{{ column.javaname }} = BufferUtils.convertToMsgpack((List<?>) particle.get("{{ column.javaname }}"));
    {% elif column.numeric %}
        this.{{column.javaname}} = ({{column.java_object}}) particle.get("{{column.name}}");
    {% else %}
        this.{{column.javaname}} = (particle.get("{{column.name}}") == null) ? null: particle.get("{{column.name}}").toString();
    {% endif %}
{% endif %}
{% endfor %}
    }

    // Getters and Setters

    public String getStream_name() {
        return stream_name;
    }

{% for column in table.columns %}
    {% if column.javatype == 'ByteBuffer' %}
    {% if column.java_object == 'Double' %}
    @JsonSerialize(using=DoubleBufferSerializer.class)
    {% elif column.java_object == 'Long' %}
    @JsonSerialize(using=LongBufferSerializer.class)
    {% elif column.java_object == 'Integer' %}
    @JsonSerialize(using=IntBufferSerializer.class)
    {% endif %}
    {% endif %}
    public {{column.javatype}} {{column.getter}}() {
        return {{column.javaname}};
    }

    public void {{column.setter}}({{column.javatype}} {{column.javaname}}) {

        this.{{column.javaname}} = {{column.javaname}};
    }

{% endfor %}
}
