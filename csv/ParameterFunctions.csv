scenario,id,hid,name,instrumentclass,instrumentseries,functiontype,function,owner,args,kwargs,description,reference,skip,qcflag
DOC,Unique Identifier,"Human readable Unique Identifier

Name + _ + InstCls + _ + InstSer",Cannonical Name for the Function,,,NumexprFunction or PythonFunction,"for NumexprFunction:
A string algorithm containing #'s, operators, and variables.  Variables must be in the associated Parameter Map

for PythonFunction:
The string name of the function contained in Owner","ONLY FOR PythonFunction

The package/module that contains the function",The list of arguments to feed into the function.  These must be available keys in the associated Parameter Map.,"ONLY FOR PythonFunction

A dictionary of keyword arguments to feed into the function

NOT YET SUPPORTED",,,,
BETA,PFID1,TEMPWAT_L1_CTDMO_,TEMPWAT_L1,CTDMO,,NumexprFunction,(T / 10000) - 10,,['T'],,,,,
BETA,PFID2,CONDWAT_L1_CTDMO_,CONDWAT_L1,CTDMO,,NumexprFunction,(C / 100000) - 0.5,,['C'],,,,,
BETA,PFID3,PRESWAT_L1_CTDMO_,PRESWAT_L1,CTDMO,,NumexprFunction,(P * p_range / (0.85 * 65536)) - (0.05 * p_range),,"['P', 'p_range']",,,,,
BETA,PFID6,"SFLPRES_L1_PRESF, PREST_All",SFLPRES_L1,"PRESF, PREST",All,NumexprFunction,p_psia * 0.689475728,,['p_psia'],,Scaling function to convert the absolute pressure measurement in psi to dbar.,,,
BASE,PFID17,global_range_test__,global_range_test,,,QCPythonFunction,dataqc_globalrangetest_minmax,ion_functions.qc.qc_functions,"['dat','dat_min','dat_max']",,,,,0b0000000000000001
BASE,PFID18,dataqc_localrangetest__,dataqc_localrangetest,,,QCPythonFunction,dataqc_localrangetest_wrapper,ion_functions.qc.qc_functions,"['dat','datlim*', 'datlimz*', 'dims*', 'pv_callback']",,,,,0b0000000000000010
BASE,PFID19,dataqc_spiketest__,dataqc_spiketest,,,QCPythonFunction,dataqc_spiketest_wrapper,ion_functions.qc.qc_functions,"['dat','acc','N','L']",,,,,0b0000000000000100
BASE,PFID20,dataqc_polytrendtest__,dataqc_polytrendtest,,,QCPythonFunction,dataqc_polytrendtest_wrapper,ion_functions.qc.qc_functions,"['dat','t','ord_n','ntsd']",,,,,0b0000000000001000
BASE,PFID21,dataqc_stuckvaluetest__,dataqc_stuckvaluetest,,,QCPythonFunction,dataqc_stuckvaluetest_wrapper,ion_functions.qc.qc_functions,"['x','reso','num']",,,,,0b0000000000010000
BASE,PFID22,dataqc_gradienttest__,dataqc_gradienttest,,,QCPythonFunction,dataqc_gradienttest_wrapper,ion_functions.qc.qc_functions,"['dat','x','ddatdx','mindx','startdat','toldat']",,,,,0b0000000000100000
BASE,PFID24,dataqc_propagateflags__,dataqc_propagateflags,,,QCPythonFunction,dataqc_propagateflags_wrapper,ion_functions.qc.qc_functions,['strict_validation'],,,,,0b0000000010000000
"BETA,CTD_CABLED,CTD_CABLED_SBE43,CTDMO_GHQR",PFID26,"ctd_pracsal_CTDBP, CTDPF_All",ctd_pracsal,"CTDBP, CTDPF",All,PythonFunction,ctd_pracsal,ion_functions.data.ctd_functions,"['c','t','p']",,Compute the L2 PRACSAL data product from CTD,http://goo.gl/0PszwY,,
"BETA,CTD_CABLED,CTD_CABLED_SBE43,CTDMO_GHQR",PFID27,"ctd_density_CTDBP, CTDPF_All",ctd_density,"CTDBP, CTDPF",All,PythonFunction,ctd_density,ion_functions.data.ctd_functions,"['SP','t','p','lat','lon']",,Compute the L2 DENSITY data product from CTD instruments,http://goo.gl/g8uWlC,,
"ADCPT_DE,ADCPS_IK",PFID28,"adcp_beam_eastward_ADCPS,ADCPT_(I,K), (B,D,E)",adcp_beam_eastward,"ADCPS,ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_eastward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Compute the L1 VELPROF-VLE data product from ADCPs configured to output their data in Beam Coordinates.,,,
"ADCPT_DE,ADCPS_IK",PFID29,"adcp_beam_northward_ADCPS,ADCPT_(I,K), (B,D,E)",adcp_beam_northward,"ADCPS,ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_northward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Compute the L1 VELPROF-VLN data product from ADCPs configured to output their data in Beam Coordinates.,,,
"ADCPT_DE,ADCPS_IK",PFID30,"adcp_beam_vertical_ADCPS,ADCPT_(I,K), (B,D,E)",adcp_beam_vertical,"ADCPS,ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_vertical,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf']",,Compute the L1 VELPROF-VLU data product from ADCPs configured to output their data in Beam Coordinates.,,,
"ADCPT_DE,ADCPS_IK",PFID31,"adcp_beam_error_ADCPS,ADCPT_(I,K), (B,D,E)",adcp_beam_error,"ADCPS,ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_error,ion_functions.data.adcp_functions,"['b1','b2','b3','b4']",,Compute the L1 VELPROF-ERR data product from ADCPs configured to output their data in Beam Coordinates.,,,
"BETA,CTD_CABLED,CTD_CABLED_SBE43",PFID35,"ctd_sbe16plus_tempwat_CTDBP, CTDPF_All",ctd_sbe16plus_tempwat,"CTDBP, CTDPF",All,PythonFunction,ctd_sbe16plus_tempwat,ion_functions.data.ctd_functions,"['t0','a0','a1','a2','a3']",,Compute the L1 TEMPWAT data product from the SBE 16Plus V2 CTD instruments,http://goo.gl/hqD0OA,,
"BETA,CTD_CABLED,CTD_CABLED_SBE43",PFID36,ctd_sbe16plus_preswat_CTDPF_All,ctd_sbe16plus_preswat,CTDPF,All,PythonFunction,ctd_sbe16plus_preswat,ion_functions.data.ctd_functions,"['p0','t0','ptempa0','ptempa1','ptempa2','ptca0','ptca1','ptca2','ptcb0','ptcb1','ptcb2','pa0','pa1','pa2']",,Compute the L1 PRESWAT data product from the SBE 16Plus V2 CTD instruments,http://goo.gl/366Lrj,,
"BETA,CTD_CABLED,CTD_CABLED_SBE43",PFID37,"ctd_sbe16plus_condwat_CTDBP, CTDPF_All",ctd_sbe16plus_condwat,"CTDBP, CTDPF",All,PythonFunction,ctd_sbe16plus_condwat,ion_functions.data.ctd_functions,"['c0','t1','p1','g','h','i','j','cpcor','ctcor']",,Compute the L1 CONDWAT data product from the SBE 16Plus V2 CTD instruments,http://goo.gl/5M0qGW,,
"SP_MFLM,CW_TEST,ADCPSL_CSTL_FIX01",PFID38,"adcp_scaling_ADCPA,ADCPS,ADCPT_All, (J,L,N), (C,F,G,M)",adcp_scaling,"ADCPA,ADCPS,ADCPT","All, (J,L,N), (C,F,G,M)",NumexprFunction,vel / 1000.0,,['vel'],,Applying scaling function to convert L0 VELPROF data from mm/s to the L1 VELPROF in m/s.,,,
"PCO2W_B,PCO2W_A",PFID39,pco2_abs434_ratio_PCO2W_All,pco2_abs434_ratio,PCO2W,All,PythonFunction,pco2_abs434_ratio,ion_functions.data.co2_functions,['light'],,Optical Absorbance Ratio at 434 nm,,,
"PCO2W_B,PCO2W_A",PFID40,pco2_abs620_ratio_PCO2W_All,pco2_abs620_ratio,PCO2W,All,PythonFunction,pco2_abs620_ratio,ion_functions.data.co2_functions,['light'],,Optical Absorbance Ratio at 620 nm,,,
"PCO2W_B,PCO2W_A",PFID41,pco2_abs434_blank_PCO2W_All,pco2_abs434_blank,PCO2W,All,PythonFunction,pco2_abs434_blank,ion_functions.data.co2_functions,"['mtype','light','a434blnk']",,Extract Optical Absorbance Ratio at 434 nm from the blank cycle to use as a blank in calculating pCO2.,,,
"PCO2W_B,PCO2W_A",PFID42,pco2_abs620_blank_PCO2W_All,pco2_abs620_blank,PCO2W,All,PythonFunction,pco2_abs620_blank,ion_functions.data.co2_functions,"['mtype','light','a620blnk']",,Extract Optical Absorbance Ratio at 620 nm from the blank cycle to use as a blank in calculating pCO2.,,,
"PCO2W_B,PCO2W_A",PFID43,pco2_thermistor_PCO2W_All,pco2_thermistor,PCO2W,All,PythonFunction,pco2_thermistor,ion_functions.data.co2_functions,['traw'],,Convert the raw thermistor resistivity from counts to deg_C for use in subsequent pCO2 calculations,,,
"PCO2W_B,PCO2W_A",PFID44,pco2_pco2wat_PCO2W_All,pco2_pco2wat,PCO2W,All,PythonFunction,pco2_pco2wat,ion_functions.data.co2_functions,"['mtype','light','therm','ea434','eb434','ea620','eb620','calt','cala','calb','calc','a434blank','a620blank']",,Compute  the L1 PCO2WAT data product from the SAMI-II pCO2 instruments,,,
"SP_MFLM,PHSEN",PFID45,ph_434_intensity_PHSEN_All,ph_434_intensity,PHSEN,All,PythonFunction,ph_434_intensity,ion_functions.data.ph_functions,['light'],,Extract the absorbance signal intensity at 434 nm from the light measurements collected by the SAMI-II pH instrument,,,
"SP_MFLM,PHSEN",PFID46,ph_578_intensity_PHSEN_All,ph_578_intensity,PHSEN,All,PythonFunction,ph_578_intensity,ion_functions.data.ph_functions,['light'],,Extract the absorbance signal intensity at 620 nm from the light measurements collected by the SAMI-II pH instrument,,,
"SP_MFLM,PHSEN",PFID47,ph_thermistor_PHSEN_All,ph_thermistor,PHSEN,All,PythonFunction,ph_thermistor,ion_functions.data.ph_functions,['traw'],,Convert the raw thermistor resistivity from counts to deg_C for use in subsequent pH calculations,,,
"SP_MFLM,PHSEN",PFID48,ph_calc_phwater_PHSEN_All,ph_calc_phwater,PHSEN,All,PythonFunction,ph_calc_phwater,ion_functions.data.ph_functions,"['ref','light','therm','ea434','eb434','ea578','eb578','ind_slp','ind_off','psal']",,Compute the L2 PHWATER data product from the SAMI-II pH instrument using PRACSAL_L2 from a co-located CTD as an input. A default salinity of 35 can be used.,,,
"SP_MFLM,CW_TEST,ADCPSL_CSTL_FIX01,ADCPT_DE,ADCPS_IK",PFID49,"adcp_earth_eastward_ADCPA, ADCPS, ADCPT_All, (J,L,N), (C,F,G,M)",adcp_earth_eastward,"ADCPA, ADCPS, ADCPT","All, (J,L,N), (C,F,G,M)",PythonFunction,adcp_earth_eastward,ion_functions.data.adcp_functions,"['u','v','z','lat','lon','dt']",,Scale and apply the magnetic variation correction the eastward velocity component of data collect from ADCPs using the Earth Coordinate transform. Yields VELPROF-VLE_L1 data product,,,
"SP_MFLM,CW_TEST,ADCPSL_CSTL_FIX01,ADCPT_DE,ADCPS_IK",PFID50,"adcp_earth_northward_ADCPA, ADCPS, ADCPT_All, (J,L,N), (C,F,G,M)",adcp_earth_northward,"ADCPA, ADCPS, ADCPT","All, (J,L,N), (C,F,G,M)",PythonFunction,adcp_earth_northward,ion_functions.data.adcp_functions,"['u','v','z','lat','lon','dt']",,Scale and apply the magnetic variation correction the northward velocity component of data collect from ADCPs using the Earth Coordinate transform. Yields VELPROF-VLN_L1 data product,,,
"OPTAA,OPTAA_CD",PFID51,opt_beam_attenuation_OPTAA_All,opt_beam_attenuation,OPTAA,All,PythonFunction,opt_beam_attenuation,ion_functions.data.opt_functions,"['cref','csig','traw','cwl','coff','tcal','tbins','tc_arr','T','PS']",,Compute the beam attenuation coefficient (OPTATTN_L2) from raw OPTAA instrument output and instrument specific calibration files.,,,
"OPTAA,OPTAA_CD",PFID52,opt_optical_absorption_OPTAA_All,opt_optical_absorption,OPTAA,All,PythonFunction,opt_optical_absorption,ion_functions.data.opt_functions,"['aref','asig','traw','awl','aoff','tcal','tbins','ta_arr','cpd_ts','cwl','T','PS']",,Compute the optical absorption coefficient (OPTABSN_L2) from raw OPTAA instrument output and instrument specific calibration files.,,,
"BETA,VEL3D_B",PFID53,"nobska_mag_corr_east_VEL3D_A,B",nobska_mag_corr_east,VEL3D,"A,B",PythonFunction,nobska_mag_corr_east,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLE (Nobska) by correcting L0 for compass declination and converting from cm/s to m/s.,http://bit.ly/1aUbqg9,,
"BETA,VEL3D_B",PFID54,"nobska_mag_corr_north_VEL3D_A,B",nobska_mag_corr_north,VEL3D,"A,B",PythonFunction,nobska_mag_corr_north,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLN (Nobska) by correcting L0 for compass declination and converting from cm/s to m/s.,http://bit.ly/1aUbqg9,,
"BETA,VEL3D_C",PFID55,"nortek_mag_corr_east_VEL3D_C,D",nortek_mag_corr_east,VEL3D,"C,D",PythonFunction,nortek_mag_corr_east,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLE (Nortek Vector) or L1 VELPTMN-VLE (Nortek Aquadopp) by correcting theL0 for compass declination.  Output in m/s.,,,
"BETA,VEL3D_C",PFID56,"nortek_mag_corr_north_VEL3D_C,D",nortek_mag_corr_north,VEL3D,"C,D",PythonFunction,nortek_mag_corr_north,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLN (Nortek Vector) or L1 VELPTMN-VLN (Nortek Aquadopp) by correcting theL0 for compass declination.  Output in m/s.,,,
"BETA,VEL3D_B",PFID57,"nobska_scale_up_vel_VEL3D_A,B",nobska_scale_up_vel,VEL3D,"A,B",NumexprFunction,w / 100.0,,['w'],,L1 VELPTTU-VLU (Nobska) by converting L0 from cm/s to m/s.,http://bit.ly/1aUbqg9,,
"BETA,VEL3D_C",PFID58,"nortek_up_vel_VEL3D_C,D",nortek_up_vel,VEL3D,"C,D",PythonFunction,nortek_up_vel,ion_functions.data.vel_functions,['w'],,L1 VELPTTU-VLU (Nortek Vecotor) or L1 VELPTMN-VLU (Nortek Aquadopp) no algorithm needed.,,,
SP_TEST,PFID59,do2_SVU_DOSTA_ALL,do2_SVU,DOSTA,ALL,PythonFunction,do2_SVU,ion_functions.data.do2_functions,"['calphase','temp','csv']",,The Stern-Volmer-Uchida equation that converts phase into temperature corrected dissolved oxygen L1 DOCONCS,,,
"SP_TEST, CTD_CABLED",PFID60,"o2_counts_to_uM_CTDBP_N,O",o2_counts_to_uM,CTDBP,"N,O",NumexprFunction,(o2_counts / 10000.0) - 10.0,,['o2_counts'],,"L1 DOCONCS from a CTDBP linked DOSTA, converts counts to umol/L",,,
"SP_TEST, CTD_CABLED",PFID61,do2_salinity_correction_DOSTA_ALL,do2_salinity_correction,DOSTA,ALL,PythonFunction,do2_salinity_correction,ion_functions.data.do2_functions,"['DO','P','T','SP','lat','lon']",,Salinity and pressure correction to dissolved oxygen producing L2 DOCONCS,,,
DPA_TEST,PFID62,sfl_trhph_reftemp_TRHPH_ALL,sfl_trhph_reftemp,TRHPH,ALL,NumexprFunction,27.50133 - 17.2658 * V_ts + 15.83424 / V_ts,,['V_ts'],,TRHPH thermistor reference temperature,,,
TRHPH_A,PFID63,sfl_trhph_vfltemp_TRHPH_ALL,sfl_trhph_vfltemp,TRHPH,ALL,PythonFunction,sfl_trhph_vfltemp,ion_functions.data.sfl_functions,"['V_ts','V_tc','tc_slope','ts_slope']",,"L1 TRHPHTE, Vent Fluid Temperature from the TRHPH instrument class.",,,
TRHPH_A,PFID64,sfl_trhph_chloride_TRHPH_ALL,sfl_trhph_chloride,TRHPH,ALL,PythonFunction,sfl_trhph_chloride,ion_functions.data.sfl_functions,"['V_R1','V_R2','V_R3','T']",,"L2 TRHPHCC, Vent Fluid Chloride Concentration from the TRHPH instrument class.",,,
TRHPH_A,PFID65,sfl_trhph_vflorp_TRHPH_ALL,sfl_trhph_vflorp,TRHPH,ALL,PythonFunction,sfl_trhph_vflorp,ion_functions.data.sfl_functions,"['V','offset','gain']",,"L1 TRHPHEH, Vent Fluid Oxidation-Reduction Potential (ORP) from the TRHPH instrument class.",,,
DPA_TEST,PFID67,partial_pressure_co2_PCO2A_ALL,partial_pressure_co2,PCO2A,ALL,NumexprFunction,xCO2 * p / 1013.25,,"['xCO2','p']",,Partial Pressure of CO2 in the atmosphere (PCO2ATM_L1) or the surface seawater (PCO2SSW_L1).,,,
"SP_TEST,METBK_A_DCL",PFID68,mbar_2_pa_METBK_ALL,mbar_2_pa,METBK,ALL,NumexprFunction,trhph_,,['barpress'],,convert L0 barometric pressure BARPRES in millibars(mbar) to Pascals (Pa) to produce L1 BARPRES,,,
"SP_TEST,METBK_A_DCL",PFID69,windavg_mag_corr_east_METBK_ALL,windavg_mag_corr_east,METBK,ALL,PythonFunction,windavg_mag_corr_east,ion_functions.data.met_functions,"['uu','vv','lat','lon','timestamp']",,,,,
"SP_TEST,METBK_A_DCL",PFID70,windavg_mag_corr_north_METBK_ALL,windavg_mag_corr_north,METBK,ALL,PythonFunction,windavg_mag_corr_north,ion_functions.data.met_functions,"['uu','vv','lat','lon','timestamp']",,,,,
"CW_TEST,BOTPT",PFID71,prs_bottilt_ccmp_BOTPT_ALL,prs_bottilt_ccmp,BOTPT,ALL,PythonFunction,prs_bottilt_ccmp,ion_functions.data.prs_functions,"['scmp','sn']",,"Correct the sensor compass direction from the Applied Geomechanics LILY tilt sensor, accounting for magentic declination and individual sensor idiosyncracies.",,,
"CW_TEST,BOTPT",PFID72,prs_bottilt_tmag_BOTPT_ALL,prs_bottilt_tmag,BOTPT,ALL,PythonFunction,prs_bottilt_tmag,ion_functions.data.prs_functions,"['x_tilt','y_tilt']",,Calculate the tilt magnitude for BOTPT Seafloor Pressure instruments.,,,
"CW_TEST,BOTPT",PFID73,prs_bottilt_tdir_BOTPT_ALL,prs_bottilt_tdir,BOTPT,ALL,PythonFunction,prs_bottilt_tdir,ion_functions.data.prs_functions,"['x_tilt','y_tilt','ccmp']",,Calculate the tilt direction for the BOTPT Seafloor Pressure instruments.,,,
SP_MFLM,PFID74,scale_and_offset_FLORD FLORT_D,scale_and_offset,FLORD FLORT,D,NumexprFunction,sf * (X - off),,"['sf','X','off']",,"Converts a value, X, using a scaling factor (sf) and offset (off)",,,
CW_TEST,PFID75,"par_satlantic_PARAD_1,A",par_satlantic,PARAD,"1,A",NumexprFunction,Im * a1 * (x - a0),,"['Im','a0','a1','x']",,Calculates the L1 OPTPARW from the Satlantic instrument on the RSN Shallow Profiler.,,,
CW_TEST,PFID76,"par_biospherical_PARAD_K,M,N",par_biospherical,PARAD,"K,M,N",NumexprFunction,(raw - offset) / wet_scale,,"['raw','offset','wet_scale']",,Calculate the L1 OPTPARW from the Biospherical QSP-2100 series of scalar instruments.,,,
LC_UNITS,PFID77,c_to_f__,c_to_f,,,NumexprFunction,x * 1.8 + 32.0,,['x'],,Converts units from deg_C to deg_F,,,
DPA_TEST,PFID78,flo_bback_total_FLORD FLORT_ALL,flo_bback_total,FLORD FLORT,ALL,PythonFunction,flo_bback_total,ion_functions.data.flo_functions,"['beta', 'degC', 'psu', 'theta', 'wlngth', 'xfactor']",,Calculates the total optical backscatter in m^-1 (FLUBSCT-BBACK_L1) from the WET Labs ECO Triplet instruments.,,,
"FLORT_KN,FLORD_D,FLORT_D",PFID79,flo_cdom_FLORT_ALL,flo_cdom,FLORT,ALL,PythonFunction,flo_cdom,ion_functions.data.flo_functions,"['counts_output','counts_dark','scale_factor']",,Estimates the CDOM concentration in ppb (L1 CDOMFLO) from the WET Labs ECO Triplet instruments.,,,
"FLORT_KN,FLORD_D,FLORT_D",PFID80,flo_chla_FLORD FLORT_ALL,flo_chla,FLORD FLORT,ALL,PythonFunction,flo_chla,ion_functions.data.flo_functions,"['counts_output','counts_dark','scale_factor']",,Estimates the Chlorophyll a concentration in ug/L (L1 CHLAFLO) from the WET Labs ECO Triplet instruments.,,,
"FLORT_KN,FLORD_D,FLORT_D",PFID81,flo_beta_FLORD FLORT_ALL,flo_beta,FLORD FLORT,ALL,PythonFunction,flo_beta,ion_functions.data.flo_functions,"['counts_output','counts_dark','scale_factor']",,Calculates the volume scattering of seawater in m^-1 sr^-1 (FLUBSCT-BETA_L1) from the WET Labs ECO Triplet instruments.,,,
PARAD_K,PFID82,opt_par_biospherical_wfp_PARAD_K,opt_par_biospherical_wfp,PARAD,K,PythonFunction,opt_par_biospherical_wfp,ion_functions.data.opt_functions,"['output','dark_offset','scale_wet']",,Calculate the L1 OPTPARW from the Biospherical QSP-2100 series of scalar instruments on the McLane Moored Profiler.,,,
PARAD_A,PFID83,opt_par_satlantic_PARAD_A,opt_par_satlantic,PARAD,A,PythonFunction,opt_par_satlantic,ion_functions.data.opt_functions,"['counts_output','a0','a1','Im']",,Calculates the L1 OPTPARW from Satlantic PAR instruments.,,,
"DPA_TEST,CTDPF_CKL_CSTL",PFID84,"ctd_sbe52mp_condwat_CTDPF_C,K,L",ctd_sbe52mp_condwat,CTDPF,"C,K,L",PythonFunction,ctd_sbe52mp_condwat,ion_functions.data.ctd_functions,['c0'],,Compute the L1 CONDWAT data product from the SBE 52MP CTD instrument on the profiling platforms.,,,
"DPA_TEST,CTDPF_CKL_CSTL",PFID85,"ctd_sbe52mp_tempwat_CTDPF_C,K,L",ctd_sbe52mp_tempwat,CTDPF,"C,K,L",PythonFunction,ctd_sbe52mp_tempwat,ion_functions.data.ctd_functions,['t0'],,Compute the L1 TEMPWAT data product from the SBE 52MP CTD instrument on the profiling platforms.,,,
"DPA_TEST,CTDPF_CKL_CSTL",PFID86,"ctd_sbe52mp_preswat_CTDPF_C,K,L",ctd_sbe52mp_preswat,CTDPF,"C,K,L",PythonFunction,ctd_sbe52mp_preswat,ion_functions.data.ctd_functions,['p0'],,Compute the L1 PRESWAT data product from the SBE 52MP CTD instrument on the profiling platforms.,,,
DPA_TEST,PFID87,do2_dofst_volt_DOFST_A,do2_dofst_volt,DOFST,A,PythonFunction,do2_dofst_volt,ion_functions.data.do2_functions,"['voltage_counts', 'Voffset', 'Soc', 'A', 'B', 'C', 'E', 'P', 'T', 'SP', 'lat', 'lon']",,"Takes a voltage measured from a DOFST-A (SBE 43F) Oxygen sensor connected to a CTDBP (SBE 16+ V2) profiling CTD, and converts the frequency to dissolved oxygen in units of micromoles/kg for the OOI level 2 data product DOCONCF L2 (fast response oxygen) in combination with salinity, temperature, and pressure from the CTD",,,
"DPA_TEST,DOFST_K_CSTL",PFID88,do2_dofst_frequency_DOFST_K,do2_dofst_frequency,DOFST,K,PythonFunction,do2_dofst_frequency,ion_functions.data.do2_functions,"['frequency', 'Foffset', 'Soc', 'A', 'B', 'C', 'E', 'P', 'T', 'SP', 'lat', 'lon']",,"Takes a frequency measured from a DOFST-K (SBE 43F) Oxygen sensor connected to a CTDPF-CKL (SBE 52-MP) profiling CTD, and converts the frequency to dissolved oxygen in units of micromoles/kg for the OOI level 2 data product DOCONCF L2 (fast response oxygen) in combination with salinity, temperature, and pressure from the CTD",,,
"DPA_TEST,ADCPT_DE,ADCPS_IK",PFID89,"adcp_backscatter_ADCPA, ADCPS, ADCPT_All",adcp_backscatter,"ADCPA, ADCPS, ADCPT",All,PythonFunction,adcp_backscatter,ion_functions.data.adcp_functions,"['raw', 'sfactor']",,Calculate the ECHOINT L1 data product for all RDI Workhorse ADCPs and ExplorerDVLs.,,,
SP_TEST,PFID90,"opt_par_biospherical_mobile_PARAD_A,M",opt_par_biospherical_mobile,PARAD,"A,M",PythonFunction,opt_par_biospherical_mobile,ion_functions.data.opt_functions,"['output','dark_offset','scale_wet']",,Calculate the L1 OPTPARW from the Biospherical QSP-2155 series of scalar instruments on the TWR Slocum Gliders.,,,
"DPA_TEST,VEL3D_K_CSTL",PFID91,vel3dk_east_VEL3D_K,vel3dk_east,VEL3D,K,PythonFunction,vel3dk_east,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'lat', 'lon', 'timestamp', 'z', 'Vscale']",,Transforms beam velocities to Earth coordinate velocities and then corrects for magnetic declination to produce the true Earth frame eastward velocity as the L1 VELPTTU-VLE OOI data product.,,,
"DPA_TEST,VEL3D_K_CSTL",PFID92,vel3dk_north_VEL3D_K,vel3dk_north,VEL3D,K,PythonFunction,vel3dk_north,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'lat', 'lon', 'timestamp', 'z', 'Vscale']",,Transforms beam velocities to Earth coordinate velocities and then corrects for magnetic declination to produce the true Earth frame northward velocity as the L1 VELPTTU-VLN OOI data product.,,,
"DPA_TEST,VEL3D_K_CSTL",PFID93,vel3dk_up_VEL3D_K,vel3dk_up,VEL3D,K,PythonFunction,vel3dk_up,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'Vscale']",,Takes an integer vertical velocity in generic distance per second units from a VEL3D-K (Aquadopp II on a McLane Profiler(MMP)) with the provided Vscale parameter from an MMP A#####.DEC binary data file to scale the velocity to a floating point in m/s.,,,
"DPA_TEST,PCO2A_A_DCL",PFID94,pco2_co2flux_PCO2A_All,pco2_co2flux,PCO2A,All,PythonFunction,pco2_co2flux,ion_functions.data.co2_functions,"['pco2w', 'pco2a', 'u10', 't', 's']",,Compute the L2 CO2FLUX data product from the L1 PCO2ATM and PCO2SSW data products from the Pro-Oceanus pCO2 sensor with sea-surface temperature and salinity and average wind speed at 10 m as additional inputs.,,,
"DPA_TEST,SPKIR_A",PFID95,opt_ocr507_irradiance_SPKIR_All,opt_ocr507_irradiance,SPKIR,All,PythonFunction,opt_ocr507_irradiance,ion_functions.data.opt_functions,"['counts','offset','scale','immersion_factor']",,Compute the L1 SPECTIR data product from the Satlantic OCR-507 family of spectral irradiance sensors.,,,
"DPA_TEST,CTD_CABLED,CTD_CABLED_SBE43",PFID96,"ctd_sbe16digi_preswat_CTDBP_N,O",ctd_sbe16digi_preswat,CTDBP,"N,O",PythonFunction,ctd_sbe16digi_preswat,ion_functions.data.ctd_functions,"['p0', 't0', 'C1', 'C2', 'C3', 'D1', 'D2', 'T1', 'T2', 'T3', 'T4', 'T5']",,Compute the L1 PRESWAT data product from the SBE 16Plus V2 CTD instruments,,,
DPA_TEST,PFID97,flo_scat_seawater_FLORT_All,flo_scat_seawater,FLORT,All,PythonFunction,flo_scat_seawater,ion_functions.data.flo_functions,"['degC','psu', 'theta', 'wlngth', 'delta']",,"Computes the total scattering coefficient of seawater, used in the computation of the FLUBSCT-BBACK_L1 data product and required as an additional metadata product with the FLUBSCT data product.",,,
PHSEN,PFID98,ph_battery_PHSEN_All,ph_battery,PHSEN,All,PythonFunction,ph_battery,ion_functions.data.ph_functions,['braw'],,Converts the raw measured battery voltage from counts to volts for the PHSEN.,,,
"DPA_TEST,THSPH_A",PFID99,sfl_thsph_temp_th_THSPH_All,sfl_thsph_temp_th,THSPH,All,PythonFunction,sfl_thsph_temp_th,ion_functions.data.sfl_functions,"['tc_rawdec_H','e2l_H','l2s_H','ts_rawdec_r','e2l_r','l2s_r','s2v_r']",,"OOI Level 1 THSPH data product THSPHTE-TH (final temperature at position H near sample inlet), which is calculated using data from the Hydrothermal Vent Fluid In-situ Chemistry (THSPH) instrument, series A (one series for all instruments).",,,
"DPA_TEST,THSPH_A",PFID100,sfl_thsph_temp_tl_THSPH_All,sfl_thsph_temp_tl,THSPH,All,PythonFunction,sfl_thsph_temp_tl,ion_functions.data.sfl_functions,"['tc_rawdec_L','e2l_L','l2s_L','ts_rawdec_r','e2l_r','l2s_r','s2v_r']",,"OOI Level 1 THSPH data product THSPHTE-TL (final temperature at position
        L near vent), which is calculated using data from the Hydrothermal Vent
        Fluid In-situ Chemistry (THSPH) instrument, series A (one series for all
        instruments).",,,
"DPA_TEST,THSPH_A",PFID101,sfl_thsph_temp_tch_THSPH_All,sfl_thsph_temp_tch,THSPH,All,PythonFunction,sfl_thsph_temp_tch,ion_functions.data.sfl_functions,"['tc_rawdec_H','e2l_H','l2s_H']",,"OOI Level 1 THSPH data product THSPHTE-TCH (intermediate thermocouple
        temperature at position H), which is calculated using data from the
        Hydrothermal Vent Fluid In-situ Chemistry (THSPH) instrument, series A
        (one series for all instruments).",,,
"DPA_TEST,THSPH_A",PFID102,sfl_thsph_temp_tcl_THSPH_All,sfl_thsph_temp_tcl,THSPH,All,PythonFunction,sfl_thsph_temp_tcl,ion_functions.data.sfl_functions,"['tc_rawdec_L','e2l_L','l2s_L']",,"OOI Level 1 THSPH data product THSPHTE-TCL (intermediate thermocouple
        temperature at position L), which is calculated using data from the
        Hydrothermal Vent Fluid In-situ Chemistry (THSPH) instrument, series A
        (one series for all instruments).",,,
"DPA_TEST,THSPH_A",PFID103,sfl_thsph_temp_int_THSPH_All,sfl_thsph_temp_int,THSPH,All,PythonFunction,sfl_thsph_temp_int,ion_functions.data.sfl_functions,"['ts_rawdec_b','e2l_b','l2s_b']",,"OOI Level 1 THSPH data product THSPHTE-INT (internal board thermistor temperature), which is calculated using data from the Hydrothermal Vent Fluid In-situ Chemistry (THSPH) instrument",,,
"DPA_TEST,THSPH_A",PFID104,sfl_thsph_temp_ref_THSPH_All,sfl_thsph_temp_ref,THSPH,All,PythonFunction,sfl_thsph_temp_ref,ion_functions.data.sfl_functions,"['ts_rawdec_r','e2l_r','l2s_r']",,"OOI Level 1 THSPH data product THSPHTE-REF (reference thermistor
        temperature), which is calculated using data from the Hydrothermal
        Vent Fluid In-situ Chemistry (THSPH) instrument, series A (one series
        for all instruments).",,,
"BETA,VELPT_D",PFID105,velpt_mag_corr_north_VELPT_D,velpt_mag_corr_north,VELPT,D,PythonFunction,velpt_mag_corr_north,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLN (Nortek Vector) or L1 VELPTMN-VLN (Nortek Aquadopp) by correcting theL0 for compass declination. Output in m/s.,,,
"BETA,VELPT_D",PFID106,velpt_mag_corr_east_VELPT_D,velpt_mag_corr_east,VELPT,D,PythonFunction,velpt_mag_corr_east,ion_functions.data.vel_functions,"['u','v','lat','lon','timestamp']",,L1 VELPTTU-VLE (Nortek Vector) or L1 VELPTMN-VLE (Nortek Aquadopp) by correcting theL0 for compass declination. Output in m/s.,,,
"BETA, VELPT_D",PFID107,velpt_up_vel_VELPT_D,velpt_up_vel,VELPT,D,PythonFunction,velpt_up_vel,ion_functions.data.vel_functions,['w'],,L1 VELPTTU-VLU (Nortek Vecotor) or L1 VELPTMN-VLU (Nortek Aquadopp) no algorithm needed.,,,
TRHPH_A,PFID108,sfl_trhph_vfl_thermistor_temp_TRHPH_ALL,sfl_trhph_vfl_thermistor_temp,TRHPH,ALL,PythonFunction,sfl_trhph_vfl_thermistor_temp,ion_functions.data.sfl_functions,['V_ts'],,"Calculates T_S, which is an intermediate data product (not a core data
        product) requested by the authors of the TRHPHTE DPS. It is the
        instrument's thermistor temperature, useful as an important instrument
        diagnostic. It is the same variable as T_ts in the function
        sfl_trhph_vfltemp.",,,
NUTNR_A,PFID109,ts_corrected_nitrate_NUTNR_All,ts_corrected_nitrate,NUTNR,All,PythonFunction,ts_corrected_nitrate,ion_functions.data.nit_functions,"['cal_temp','wl','eno3','eswa','di','dark_value','ctd_t','ctd_sp','data_in','frame_type','wllower','wlupper']",,"The OOI Level 2 Dissolved Nitrate Concentration, Temperature & Salinity Corrected core data product (L2 NITRTSC) is based on the ultraviolet (UV) absorption characteristics of nitrate dissolved in seawater. The L2 NITRTSC is produced from the L0 NITROPT output of the NUTNR instrument class and the L1 Water Temperature (TEMPWAT) and L2 Practical Salinity (PRACSAL) core data products from a co-located Conductivity, Temperature, and Depth (CTD) instrument. The L2 NITRTSC core data product improves upon accuracy of onboard L1 NITRDIS through corrections for both seawater absorbance and its temperature dependence",,,
THSPH_A,PFID110,sfl_thsph_ph_THSPH_All,sfl_thsph_ph,THSPH,All,PythonFunction,sfl_thsph_ph,ion_functions.data.sfl_functions,"['counts_ysz','counts_agcl','temperature','e2l_ysz','e2l_agcl','arr_hgo','arr_agcl','arr_tac','arr_tbc1','arr_tbc2','arr_tbc3','chl']",,"Calculates the THSPHPH-PH_L2 data product, one of the 4 THSPHPH data
        products for the THSPH instruments. The PH data product algorithm
        calculates pH assuming good chloride data is available from
        TRHPH (TRHPHCC_L2) and a working AgCl reference electrode.",,,
THSPH_A,PFID111,sfl_thsph_ph_acl_THSPH_All,sfl_thsph_ph_acl,THSPH,All,PythonFunction,sfl_thsph_ph_acl,ion_functions.data.sfl_functions,"['counts_ysz','counts_agcl','temperature','e2l_ysz','e2l_agcl','arr_hgo','arr_agcl','arr_tac','arr_tbc1','arr_tbc2','arr_tbc3']",,"Calculates the THSPHPH-PH-ACL_L2 data product, one of the 4 THSPHPH
        data products for the THSPH instruments. The PH-ACL data product
        algorithm calculates pH assuming no good chloride data available from
        TRHPH (TRHPHCC_L2) (assumes instead a pre-determined chloride concentration
        which is set in the chloride_activity function). The data from the AgCl
        reference electrode is also assumed to be good and used in this
        calculation.",,,
THSPH_A,PFID112,sfl_thsph_ph_noref_THSPH_All,sfl_thsph_ph_noref,THSPH,All,PythonFunction,sfl_thsph_ph_noref,ion_functions.data.sfl_functions,"['counts_ysz','temperature','arr_agclref','e2l_ysz','arr_hgo','arr_agcl','arr_tac','arr_tbc1','arr_tbc2','arr_tbc3','chl']",,"Calculates the THSPHPH-PH-NOREF_L2 data product, one of the 4 THSPHPH
        data products for the THSPH instruments. The PH-NOREF data product
        algorithm calculates pH assuming no good reference (AgCl) electrode data
        (uses instead a theoretical value calculated from vent temperature) and
        also uses (presumably good) chloride data from TRHPH (TRHPHCC_L2).",,,
THSPH_A,PFID113,sfl_thsph_ph_noref_acl_THSPH_All,sfl_thsph_ph_noref_acl,THSPH,All,PythonFunction,sfl_thsph_ph_noref_acl,ion_functions.data.sfl_functions,"['counts_ysz','temperature','arr_agclref','e2l_ysz','arr_hgo','arr_agcl','arr_tac','arr_tbc1','arr_tbc2','arr_tbc3']",,"Calculates the THSPHPH-PH-NOREF-ACL_L2 data product, one of the 4 THSPHPH
        data products for the THSPH instruments. The PH-NOREF-ACL data product
        algorithm calculates pH assuming no good reference (AgCl) electrode data
        (uses instead a theoretical value calculated from vent temperature) and
        assuming no good chloride data from TRHPH (TRHPHCC_L2) (assumes instead a
        pre-determined chloride concentration which is set in the chloride_activity
        function).",,,
THSPH_A,PFID114,sfl_thsph_sulfide_THSPH_All,sfl_thsph_sulfide,THSPH,All,PythonFunction,sfl_thsph_sulfide,ion_functions.data.sfl_functions,"['counts_hs','counts_ysz','temperature','e2l_hs','e2l_ysz','arr_hgo','arr_logkfh2g','arr_eh2sg','arr_yh2sg']",,"Calculates the THSPHHS_L2 data product (hydrogen sulfide concentration) for
        the THSPH instruments from vent temperature and from data from its sulfide
        and YSZ electrodes. Note that the chemical formula for hydrogen is H2, and
        that for hydrogen sulfide is H2S; this could lead to confusion in the
        variable and array names from the DPS if care is not taken. Note also that
        this hydrogen sulfide DPA does use an intermediate data product and its
        'calibration' coefficients (hydrogen fugacity) that are also used in the
        hydrogen concentration DPA.",,,
THSPH_A,PFID115,sfl_thsph_hydrogen_THSPH_All,sfl_thsph_hydrogen,THSPH,All,PythonFunction,sfl_thsph_hydrogen,ion_functions.data.sfl_functions,"['counts_h2','counts_ysz','temperature','e2l_h2','e2l_ysz','arr_hgo','arr_logkfh2g']",,"Calculates the THSPHHC_L2 data product (hydrogen concentration) for the THSPH
        instruments from vent temperature and from data from its hydrogen and YSZ
        electrodes.",,,
ANTELOPE,PFID116,hyd_bb_acoustic_pwaves_HYDBB_All,hyd_bb_acoustic_pwaves,HYDBB,All,PythonFunction,hyd_bb_acoustic_pwaves,ion_functions.data.hyd_functions,"['wav','gain']",,"Calculates the OOI Level 1 (L1) Broadband Acoustic Pressure Waves core
        data product (HYDAPBB)",,,
ANTELOPE,PFID117,hyd_lf_acoustic_pwaves_HYDLF_All,hyd_lf_acoustic_pwaves,HYDLF,All,PythonFunction,hyd_lf_acoustic_pwaves,ion_functions.data.hyd_functions,['raw'],,Calculates the HYDAPLF_L1 data product (low frequency acoustic pressure wave) from the HYDBB instrument using the HYDAPLF_L0 as input.,,,
ANTELOPE,PFID118,obs_bb_ground_velocity_OBSBB_All,obs_bb_ground_velocity,OBSBB,All,PythonFunction,obs_bb_ground_velocity,ion_functions.data.obs_functions,['raw'],,Calculates the GRNDVEL_L1 data product (broadband ground velocity) from the OBSBB instrument using the GRNDVEL_L0 as input.,,,
ANTELOPE,PFID119,obs_bb_ground_acceleration_OBSBB_All,obs_bb_ground_acceleration,OBSBB,All,PythonFunction,obs_bb_ground_acceleration,ion_functions.data.obs_functions,['raw'],,Calculates the GRNDACC_L1 data product (broadband ground acceleration) from the OBSBB instrument using the GRNDACC_L0 as input.,,,
ANTELOPE,PFID120,obs_sp_ground_velocity_OBSSP_All,obs_sp_ground_velocity,OBSSP,All,PythonFunction,obs_sp_ground_velocity,ion_functions.data.obs_functions,['raw'],,Calculates the SGRDVEL_L1 data product (short period ground velocity) from the OBSSP instrument using the SGRDVEL_L0 as input.,,,
VADCP_A,PFID121,vadcp_beam_eastward_VADCP_All,vadcp_beam_eastward,VADCP,All,PythonFunction,vadcp_beam_eastward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Calculates the VELTURB-VLE_L1 data product (eastward seawater velocity) in m/s from the VADCP instrument.,,,
VADCP_A,PFID122,vadcp_beam_northward_VADCP_All,vadcp_beam_northward,VADCP,All,PythonFunction,vadcp_beam_northward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Calculates the VELTURB-VLN_L1 data product (northward seawater velocity) in m/s from the VADCP instrument.,,,
VADCP_A,PFID123,vadcp_beam_vertical_est_VADCP_All,vadcp_beam_vertical_est,VADCP,All,PythonFunction,vadcp_beam_vertical_est,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf']",,Calculates the VELTURB-VLU_L1 data product (estimated vertical seawater velocity) in m/s from the VADCP instrument.,,,
VADCP_A,PFID124,vadcp_beam_vertical_true_VADCP_All,vadcp_beam_vertical_true,VADCP,All,PythonFunction,vadcp_beam_vertical_true,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','b5','h','p','r','vf']",,Calculates the VELTURB-W5_L1 data product (true vertical seawater velocity) in m/s from the VADCP instrument.,,,
VADCP_A,PFID125,vadcp_beam_error_VADCP_All,vadcp_beam_error,VADCP,All,PythonFunction,vadcp_beam_error,ion_functions.data.adcp_functions,"['b1','b2','b3','b4']",,Calculates the VELTURB-EVL_L1 data product (error velocity) in m/s from the VADCP instrument.,,,
"ADCPT_DE,ADCPS_IK",PFID126,"adcp_beam2ins_ADCPA, ADCPS, ADCPT_All",adcp_beam2ins,"ADCPA, ADCPS, ADCPT",All,PythonFunction,adcp_beam2ins,ion_functions.data.adcp_functions,"['b1','b2','b3','b4']",,This function converts the Beam Coordinate transformed velocity profiles to the instrument coordinate system. The calculations are defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
"ADCPT_DE,ADCPS_IK",PFID127,"adcp_ins2earth_ADCPA, ADCPS, ADCPT_All",adcp_ins2earth,"ADCPA, ADCPS, ADCPT",All,PythonFunction,adcp_ins2earth,ion_functions.data.adcp_functions,"['u','v','w','heading','pitch','roll','vertical']",,This function converts the Instrument Coordinate transformed velocity profiles to the Earth coordinate system. The calculation is defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
"ADCPT_DE,ADCPS_IK",PFID128,"adcp_earth_upward_ADCPA, ADCPS, ADCPT_All",adcp_earth_upward,"ADCPA, ADCPS, ADCPT",All,PythonFunction,adcp_earth_vertical,ion_functions.data.adcp_functions,[w],,Wrapper function to compute the Upward Velocity Profile (VELPROF-VLU) from Earth coordinate transformed velocity profiles as defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
"ADCPT_DE,ADCPS_IK",PFID129,"adcp_earth_error_velocity_ADCPA, ADCPS, ADCPT_All",adcp_earth_error_velocity,"ADCPA, ADCPS, ADCPT",All,PythonFunction,adcp_earth_error,ion_functions.data.adcp_functions,[e],,Wrapper function to compute the Error Velocity Profile (VELPROF-ERR) from Earth coordinate transformed velocity profiles as defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
BETA,PFID130,"sfl_sflpres_rtime_PRESF, PREST_All",sfl_sflpres_rtime,"PRESF, PREST",All,PythonFunction,sfl_sflpres_rtime,ion_functions.data.sfl_functions,['p_psia'],,Scaling function to convert the absolute pressure measurement in psi to dbar. Used to compute SFLPRES-RTIME_L1.,,,
BETA,PFID131,"sfl_sflpres_tide_PRESF, PREST_All",sfl_sflpres_tide,"PRESF, PREST",All,PythonFunction,sfl_sflpres_tide,ion_functions.data.sfl_functions,"['p_dec_tide',' b','m','slope','offset']",,Used to compute SFLPRES-TIDE_L1.,,,
BETA,PFID132,"sfl_sflpres_wave_PRESF, PREST_All",sfl_sflpres_wave,"PRESF, PREST",All,PythonFunction,sfl_sflpres_wave,ion_functions.data.sfl_functions,"['ptcn,'p_dec_wave','u0','y1','y2','y3','c1','c2','c3','d1','d2','t1','t2','t3','t4','poff','slope','offset']",,Used to compute SFLPRES-WAVE_L1.,,,
BETA,PFID133,wav_triaxys_dir_freq_WAVSS_All,wav_triaxys_dir_freq,WAVSS,All,PythonFunction,wav_triaxys_dir_freq,ion_functions.data.wav_functions,"['nfreq_nondir','nfreq_dir','freq0','delta_freq']",,"Function to compute the WAVSTAT-FDS_L1 data product (frequency values for directional wave spectral bins) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies).",,,
BETA,PFID134,wav_triaxys_nondir_freq_WAVSS_All,wav_triaxys_nondir_freq,WAVSS,All,PythonFunction,wav_triaxys_nondir_freq,ion_functions.data.wav_functions,"['nfreq','freq0','delta_freq']",,"Function to compute the WAVSTAT-FND_L1 data product (frequency values for non-directional wave spectral bins) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies).",,,
BETA,PFID135,wav_triaxys_buoymotion_time_WAVSS_All,wav_triaxys_buoymotion_time,WAVSS,All,PythonFunction,wav_triaxys_buoymotion_time,ion_functions.data.wav_functions,"['ntp_timestamp','ntime','time0','delta_time']",,"Function to compute the WAVSTAT-MOTT_L1 data product (time values associated with buoy displacement measurements WAVSTAT-MOT[X,Y,Z]) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies).",,,
BETA,PFID136,wav_triaxys_correct_mean_wave_direction_WAVSS_All,wav_triaxys_correct_mean_wave_direction,WAVSS,All,PythonFunction,wav_triaxys_correct_mean_wave_direction,ion_functions.data.wav_functions,"['dir_raw','lat','lon','ntp_ts']",,"Function to compute the WAVSTAT-D_L2 data product (mean wave direction corrected for magnetic declination) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies).",,,
BETA,PFID137,wav_triaxys_correct_directional_wave_direction_WAVSS_All,wav_triaxys_correct_directional_wave_direction,WAVSS,All,PythonFunction,wav_triaxys_correct_directional_wave_direction,ion_functions.data.wav_functions,"['dir_raw','lat','lon','ntp_ts']",,"Function to compute the WAVSTAT-DDS_L2 data product (directional wave directions corrected for magnetic declination) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies).",,,
BETA,PFID138,wav_triaxys_magcor_buoymotion_x_WAVSS_All,wav_triaxys_magcor_buoymotion_x,WAVSS,All,PythonFunction,wav_triaxys_magcor_buoymotion_x,ion_functions.data.wav_functions,"['x','y','lat','lon','ntp_timestamp']",,"Function to compute the WAVSTAT-MOTX_L1 data product (eastward buoy displacement) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies) from the WAVSTAT-MOTX_L0 and WAVSTAT-MOTY_L0 data products. All that is required is to correct for magnetic declination (variation).",,,
BETA,PFID139,wav_triaxys_magcor_buoymotion_y_WAVSS_All,wav_triaxys_magcor_buoymotion_y,WAVSS,All,PythonFunction,wav_triaxys_magcor_buoymotion_y,ion_functions.data.wav_functions,"['x','y','lat','lon','ntp_timestamp']",,"Function to compute the WAVSTAT-MOTY_L1 data product (northward buoy displacement) for the WAVSS instrument class (TRIAXYS Wave Sensor, manufactured by AXYS Technologies) from the WAVSTAT-MOTX_L0 and WAVSTAT-MOTY_L0 data products. All that is required is to correct for magnetic declination (variation).",,,
BETA,PFID140,ctd_sbe37im_tempwat_CTDMO_All,ctd_sbe37im_tempwat,CTDMO,All,PythonFunction,ctd_sbe37im_tempwat,ion_functions.data.ctd_functions,['t0'],,,,,
BETA,PFID141,ctd_sbe37im_condwat_CTDMO_All,ctd_sbe37im_condwat,CTDMO,All,PythonFunction,ctd_sbe37im_condwat,ion_functions.data.ctd_functions,['c0'],,,,,
BETA,PFID142,ctd_sbe37im_preswat_CTDMO_All,ctd_sbe37im_preswat,CTDMO,All,PythonFunction,ctd_sbe37im_preswat,ion_functions.data.ctd_functions,"['p0', 'p_range_psia']",,,,,
METBK,PFID143,BARPRES_L1_METBK_All,BARPRES_L1,METBK,All,PythonFunction,met_barpres,ion_functions.data.met_functions,['mbar'],,"OOI Level 1 Barometric Pressure core data product, which is calculated by scaling the measured barometric pressure from mbar to Pascals.",,,
METBK,PFID144,WINDAVG-VLE_L1_METBK_All,WINDAVG-VLE_L1,METBK,All,PythonFunction,met_windavg_mag_corr_east,ion_functions.data.met_functions,"['uu', 'vv', 'lat', 'lon', 'timestamp', 'zwindsp']",,"Calculates WINDAVG-VLE_L1, the OOI Level 1 core data product for windspeed in the true eastward direction, for the METBK instrument by correcting for magnetic declination.",,,
METBK,PFID145,WINDAVG-VLN_L1_METBK_All,WINDAVG-VLN_L1,METBK,All,PythonFunction,met_windavg_mag_corr_north,ion_functions.data.met_functions,"['uu', 'vv', 'lat', 'lon', 'timestamp', 'zwindsp']",,"Calculates WINDAVG-VLN_L1, the OOI Level 1 core data product for windspeed in the true northward direction, for the METBK instrument by correcting for magnetic declination.",,,
METBK,PFID146,CURRENT_DIR_METBK_All,CURRENT_DIR,METBK,All,PythonFunction,met_current_direction,ion_functions.data.met_functions,"['vle_water', 'vln_water']",,Calculates the direction of the surface current using the eastward and northward velocity components from the VELPT mounted on the surface buoy.,,,
METBK,PFID147,CURRENT_SPD_METBK_All,CURRENT_SPD,METBK,All,PythonFunction,met_current_speed,ion_functions.data.met_functions,"['vle_water', 'vln_water']",,"Estimate the magnitude of the surface current using the eastward and northward velocity components from the VELPT mounted on the surface buoy. This is the meta-data ""product"" CURRENT specified by the DPS referenced below (Section 4.3, step 4). This product is not used in the METBK code; rather, the magnitude of the vector difference of te wind and current vectors is the fundamental variable used in the METBK calculations (see RELWIND_SPD-AUX). Because the direction of the current will also be calculated so as to be made available, the CURRENT metadata product is sub-divided into: CURRENT_SPD (calculated by this code) and CURRENT_DIR.",,,
METBK,PFID148,RELWIND_DIR-AUX_METBK_All,RELWIND_DIR-AUX,METBK,All,PythonFunction,met_relwind_direction,ion_functions.data.met_functions,"['vle_wind', 'vln_wind', 'vle_water', 'vln_water']",,"Calculates RELWIND_DIR-AUX, the direction of the vector difference of wind velocity (from METBK measurements) and surface current (from VELPT measurements). It is anticipated that the wind measurements will be roughly each minute and that the current measurements will be broadcast to that resolution.",,,
METBK,PFID149,RELWIND_SPD-AUX_METBK_All,RELWIND_SPD-AUX,METBK,All,PythonFunction,met_relwind_speed,ion_functions.data.met_functions,"['vle_wind', 'vln_wind', 'vle_water', 'vln_water']",,"Calculates RELWIND_SPD-AUX, the magnitude of the vector difference of surface current (from VELPT measurements) from wind velocity (from METBK measurements). This is the fundamental windspeed variable used in the METBK toga-coare algorithms. It is anticipated that the wind measurements will be roughly each minute and that the current measurements will be broadcast to that resolution.",,,
METBK,PFID150,TIMEFLX-AUX_METBK_All,TIMEFLX-AUX,METBK,All,PythonFunction,met_timeflx,ion_functions.data.met_functions,['timestamp'],,"Calculates TIMEFLX-AUX, the timestamps corresponding to the hourly averaged METBK data products. The units of the timestamps are seconds since 01-01-1900. The timestamp values are selected to be at the midpoint of the bin intervals, starting half an hour after the timestamp of the first data record to be processed. For example, if the first data record for 30 days of data is at 4:45 AM on a given day, the first timeflx stamp will be at 5:15 AM on that day, and all succeeding timestamps for the rest of the data will all be at 15 minutes past the hour.",,,
METBK,PFID151,NETSIRR_L2_METBK_All,NETSIRR_L2,METBK,All,PythonFunction,met_netsirr,ion_functions.data.met_functions,['shortwave_down'],,"Calculates NETSIRR_L2, the OOI core data product net shortwave radiation in the downward direction, for the METBK instrument. This data product may have been misclassified (it looks like L1).",,,
METBK,PFID152,RAINRTE_L2_METBK_All,RAINRTE_L2,METBK,All,PythonFunction,met_rainrte,ion_functions.data.met_functions,"['cumulative_precipitation', 'timestamp']",,"Calculates RAINRTE_L2 (probably really an L1 product), the OOI core data product rain rate, for the METBK instrument. The DPS requires that the output data be hourly; METBK is set up to give roughly one data record per minute for the data needed to calculate RAINRTE.",,,
METBK,PFID153,SALSURF_L2_METBK_All,SALSURF_L2,METBK,All,PythonFunction,met_salsurf,ion_functions.data.met_functions,"['cond, tC_sea', 'ztmpwat']",,"OOI Level 2 Sea Surface Salinity core data product, which is calculated using the Thermodynamic Equations of Seawater - 2010 (TEOS-10) Version 3.0, with data from the conductivity, temperature and depth (CTD) family of instruments.",,,
METBK,PFID154,SPECHUM_L2_METBK_All,SPECHUM_L2,METBK,All,PythonFunction,met_spechum,ion_functions.data.met_functions,"['tC_air', 'pr_air', 'relhum']",,"Calculates SPECHUM_L2, the OOI air specific humidity core data product, for the METBK instrument. Not to be confused with the SPHUM2M_L2 data product.",,,
METBK,PFID155,BUOYFLS_L2_METBK_All,BUOYFLS_L2,METBK,All,PythonFunction,met_buoyfls,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,"Calculates the sonic buoyancy flux (proposed) data product BUOYFLS_L2 using the sonic temperature instead of the virtual temperature. The FDCHP instrument calculates the analogous FLUXHOT_L2 data product also as a buoyancy flux using the sonic temperature. In contrast, the (METBK) proposed data product BUOYFLX_L2 uses the virtual temperature in its calculation of buoyancy flux.",,,
METBK,PFID156,BUOYFLX_L2_METBK_All,BUOYFLX_L2,METBK,All,PythonFunction,met_buoyflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the buoyancy flux (proposed) data product BUOYFLX_L2 using the virtual temperature. This is the more fundamental quantity for buoyancy flux (rather than using the sonic temperature).,,,
METBK,PFID157,FRSHFLX_L2_METBK_All,FRSHFLX_L2,METBK,All,PythonFunction,met_frshflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the freshwater upward flux data product FRSHFLX_L2.,,,
METBK,PFID158,HEATFLX_L2_METBK_All,HEATFLX_L2,METBK,All,PythonFunction,met_heatflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the total net upward heat flux data product HEATFLX_L2.,,,
METBK,PFID159,LATNFLX_L2_METBK_All,LATNFLX_L2,METBK,All,PythonFunction,met_latnflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the upward latent heat flux data product LATNFLX_L2.,,,
METBK,PFID160,MOMMFLX_L2_METBK_All,MOMMFLX_L2,METBK,All,PythonFunction,met_mommflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,"Calculates (the absolute value of) the momentum flux MOMMFLX_L2, also called the wind stress tau.",,,
METBK,PFID161,NETLIRR_L2_METBK_All,NETLIRR_L2,METBK,All,PythonFunction,met_netlirr,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the net upward longwave irradiance NETLIRR_L2.,,,
METBK,PFID162,RAINFLX_L2_METBK_All,RAINFLX_L2,METBK,All,PythonFunction,met_rainflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,"Calculates the net upward rain heat flux RAINFLX_L2. A new derivation for rain heat flux is used, as calculated in the subroutine rain_heat_flux.",,,
METBK,PFID163,SENSFLX_L2_METBK_All,SENSFLX_L2,METBK,All,PythonFunction,met_sensflx,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the net upward sensible heat flux SENSFLX_L2.,,,
METBK,PFID164,SPHUM2M_L2_METBK_All,SPHUM2M_L2,METBK,All,PythonFunction,met_sphum2m,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the modelled specific humidity at a reference height of 2m SPHUM2M_L2.,,,
METBK,PFID165,STABLTY_L2_METBK_All,STABLTY_L2,METBK,All,PythonFunction,met_stablty,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the Monin-Obukhov stability parameter metadata product STABLTY_L2.,,,
METBK,PFID166,TEMPA2M_L2_METBK_All,TEMPA2M_L2,METBK,All,PythonFunction,met_tempa2m,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the modelled air temperature at a reference height of 2m TEMPA2M_L2.,,,
METBK,PFID167,TEMPSKN_L2_METBK_All,TEMPSKN_L2,METBK,All,PythonFunction,met_tempskn,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the skin sea temperature based on the warmlayer and coolskin (coare35vn) model: metadata product TEMPSKN_L2.,,,
METBK,PFID168,WIND10M_L2_METBK_All,WIND10M_L2,METBK,All,PythonFunction,met_wind10m,ion_functions.data.met_functions,"['tC_sea', 'wnd', 'tC_air', 'relhum', 'timestamp', 'lon', 'ztmpwat', 'zwindsp', 'ztmpair', 'zhumair', 'lat', 'pr_air', 'Rshort_down', 'Rlong_down', 'cumu_prcp', 'zinvpbl', 'jwarm', 'jcool']",,Calculates the modelled windspeed at a reference height of 10m WIND10M_L2.,,,
VEL3D_K,PFID169,VELPTMN-VLE_L1_VEL3D_K,VELPTMN-VLE_L1,VEL3D,K,PythonFunction,vel3dk_east,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'lat', 'lon', 'timestamp', 'Vscale']",,Function to compute the Eastward Velocity L1 VELPTMN-VLE in True Earth coordinates,,,
VEL3D_K,PFID170,VELPTMN-VLN_L1_VEL3D_K,VELPTMN-VLN_L1,VEL3D,K,PythonFunction,vel3dk_north,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'lat', 'lon', 'timestamp', 'Vscale']",,Function to compute the Northward Velocity L1 VELPTMN-VLN in True Earth coordinates,,,
VEL3D_K,PFID171,VELPTMN-VLU_L1_VEL3D_K,VELPTMN-VLU_L1,VEL3D,K,PythonFunction,vel3dk_up,ion_functions.data.vel_functions,"['vel0', 'vel1', 'vel2', 'heading', 'pitch', 'roll', 'beams', 'Vscale']",,Function to compute the Upward Velocity L1 VELPTMN-VLU,,,
PARAD_J,PFID172,opt_par_wetlabs_PARAD_J,opt_par_wetlabs,PARAD,J,PythonFunction,opt_par_wetlabs,ion_functions.data.opt_functions,"['counts_output','a0','a1','Im']",,Calculates the L1 OPTPARW from Wet Labs PAR instruments.,,,
VEL3D_A,PFID173,fsi_acm_rsn_east_VEL3D_A,fsi_acm_rsn_east,VEL3D,A,PythonFunction,fsi_acm_rsn_east,ion_functions.data.vel_functions,"['vp1', 'vp3', 'hx', 'hy', 'hdg_cal', 'hx_cal', 'hy_cal', 'lat', 'lon', 'timestamp']",,Calculates the VEL3D Series A eastwards velocity data product VELPTMN-VLE_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler as deployed by RSN. The horizontal velocities are corrected for magnetic declination.,,,
VEL3D_A,PFID174,fsi_acm_rsn_north_VEL3D_A,fsi_acm_rsn_north,VEL3D,A,PythonFunction,fsi_acm_rsn_north,ion_functions.data.vel_functions,"['vp1', 'vp3', 'hx', 'hy', 'hdg_cal', 'hx_cal', 'hy_cal', 'lat', 'lon', 'timestamp']",,Calculates the VEL3D Series A northwards velocity data product VELPTMN-VLN_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler as deployed by RSN. The horizontal velocities are corrected for magnetic declination.,,,
VEL3D_L,PFID175,fsi_acm_sio_east_VEL3D_L,fsi_acm_sio_east,VEL3D,L,PythonFunction,fsi_acm_sio_east,ion_functions.data.vel_functions,"['vp1', 'vp3', 'hdg', 'lat', 'lon', 'timestamp']",,Calculates the VEL3D Series L eastwards velocity data product VELPTMN-VLE_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler as deployed by Scripps. Horizontal velocities are corrected for magnetic variation.,,,
VEL3D_L,PFID176,fsi_acm_sio_north_VEL3D_L,fsi_acm_sio_north,VEL3D,L,PythonFunction,fsi_acm_sio_north,ion_functions.data.vel_functions,"['vp1', 'vp3', 'hdg', 'lat', 'lon', 'timestamp']",,Calculates the VEL3D Series L northwards velocity data product VELPTMN-VLN_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler as deployed by Scripps. Horizontal velocities are corrected for magnetic variation.,,,
"VEL3D_A,VEL3D_L",PFID177,"fsi_acm_up_profiler_ascending_VEL3D_A,L",fsi_acm_up_profiler_ascending,VEL3D,"A,L",PythonFunction,fsi_acm_up_profiler_ascending,ion_functions.data.vel_functions,"['vp1', 'vp3', 'vp4']",,Calculates the VEL3D Series A and L upward velocity data product VELPTMN-VLU-ASC_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler.,,,
"VEL3D_A,VEL3D_L",PFID178,"fsi_acm_up_profiler_descending_VEL3D_A,L",fsi_acm_up_profiler_descending,VEL3D,"A,L",PythonFunction,fsi_acm_up_profiler_descending,ion_functions.data.vel_functions,"['vp1', 'vp2', 'vp3']",,Calculates the VEL3D Series A and L upwards velocity data product VELPTMN-VLU-DSC_L1 for the Falmouth Scientific (FSI) Acoustic Current Meter (ACM) mounted on a McLane profiler.,,,
BOTPT_A,PFID179,prs_botsflu_time15s_BOTPT_A,prs_botsflu_time15s,BOTPT,A,PythonFunction,prs_botsflu_time15s,ion_functions.data.prs_functions,['timestamp'],,Calculates the auxiliary BOTSFLU data product TIME15S-AUX. These are timestamps anchored at multiples of 15 seconds past the minute which correspond to the time base for the BOTSFLU data products which are binned on 15 seconds.,,,
BOTPT_A,PFID180,prs_botsflu_meanpres_BOTPT_A,prs_botsflu_meanpres,BOTPT,A,PythonFunction,prs_botsflu_meanpres,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,Calculates the BOTSFLU data product MEANPRES_L1.,,,
BOTPT_A,PFID181,prs_botsflu_meandepth_BOTPT_A,prs_botsflu_meandepth,BOTPT,A,PythonFunction,prs_botsflu_meandepth,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product MEANDEPTH_L2, de-tided bottom depth as a function of time (15sec bins).",,,
BOTPT_A,PFID182,prs_botsflu_5minrate_BOTPT_A,prs_botsflu_5minrate,BOTPT,A,PythonFunction,prs_botsflu_5minrate,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product 5MINRATE_L2, the instantaneous rate of depth change using 5 minute backwards-looking meandepth data.",,,
BOTPT_A,PFID183,prs_botsflu_10minrate_BOTPT_A,prs_botsflu_10minrate,BOTPT,A,PythonFunction,prs_botsflu_10minrate,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product 10MINRATE_L2, the mean seafloor uplift rate calculated using 10 minute backwards-looking 10 minute running mean depth data.",,,
BOTPT_A,PFID184,prs_botsflu_time24h_BOTPT_A,prs_botsflu_time24h,BOTPT,A,PythonFunction,prs_botsflu_time24h,ion_functions.data.prs_functions,['time15s'],,Calculates the auxiliary BOTSFLU data product TIME24H-AUX. These are timestamps anchored at midnight which correspond to the time base for the BOTSFLU data products which are binned on a day's worth of data.,,,
BOTPT_A,PFID185,prs_botsflu_daydepth_BOTPT_A,prs_botsflu_daydepth,BOTPT,A,PythonFunction,prs_botsflu_daydepth,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product DAYDEPTH_L2, de-tided bottom depth as a function of time (1 day bins).",,,
BOTPT_A,PFID186,prs_botsflu_4wkrate_BOTPT_A,prs_botsflu_4wkrate,BOTPT,A,PythonFunction,prs_botsflu_4wkrate,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product 4WKRATE_L2, the mean rate of seafloor change as calculated by 4-week backwards-looking linear regressions.",,,
BOTPT_A,PFID187,prs_botsflu_8wkrate_BOTPT_A,prs_botsflu_8wkrate,BOTPT,A,PythonFunction,prs_botsflu_8wkrate,ion_functions.data.prs_functions,"['timestamp', 'botpres']",,"Calculates the BOTSFLU data product 8WKRATE_L2, the mean rate of seafloor change as calculated by 8-week backwards-looking linear regressions.",,,
BOTPT_A,PFID188,prs_botsflu_predtide_BOTPT_A,prs_botsflu_predtide,BOTPT,A,PythonFunction,prs_botsflu_predtide,ion_functions.data.prs_functions,['time'],,"Assigns tide values for the 3 BOTPT instrument sites about 500 km west of Astoria. When the input argument is the data product TIME15S, the output of this function will be the BOTSFLU data product BOTSFLU-PREDTIDE_L2.",,,
BETA,PFID189,scale_it_All_All,scale_it,All,All,NumexprFunction,value*scaler,,"['value', 'scaler']",,Scale the value.,,,
FDCHP_A,PFID190,fdc_tmpatur_FDCHP_A,fdc_tmpatur,FDCHP,A,PythonFunction,fdc_tmpatur,ion_functions.data.fdc_functions,"['timestamp', 'sonicT']",,"Calculates the L1 temperature data product TMPATUR_L1 from the FDCHP instrument, which collects 20 minutes of data every hour. The L1 data consists of these values less 30 seconds from both the beginning and end of each 12000 point dataset.",,,
FDCHP_A,PFID191,fdc_windtur_north_FDCHP_A,fdc_windtur_north,FDCHP,A,PythonFunction,fdc_windtur_north,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates the L1 windspeed data product WINDTUR-VLN_L1 from the FDCHP instrument, which collects 20 minutes of data every hour. The L1 data consists of these values less 30 seconds from both the beginning and end of each 12000 point dataset.",,,
FDCHP_A,PFID192,fdc_windtur_up_FDCHP_A,fdc_windtur_up,FDCHP,A,PythonFunction,fdc_windtur_up,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates the L1 windspeed data product WINDTUR-VLU_L1 from the FDCHP instrument, which collects 20 minutes of data every hour. The L1 data consists of these values less 30 seconds from both the beginning and end of each 12000 point dataset.",,,
FDCHP_A,PFID193,fdc_windtur_west_FDCHP_A,fdc_windtur_west,FDCHP,A,PythonFunction,fdc_windtur_west,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates the L1 windspeed data product WINDTUR-VLW_L1 from the FDCHP instrument, which collects 20 minutes of data every hour. The L1 data consists of these values less 30 seconds from both the beginning and end of each 12000 point dataset.",,,
FDCHP_A,PFID194,fdc_fluxhot_FDCHP_A,fdc_fluxhot,FDCHP,A,PythonFunction,fdc_fluxhot,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'sonicT', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates FLUXHOT_L2, the sonic buoyancy flux, from the FDCHP instrument, which collects 20 minutes of data every hour. There is one FLUXHOT value calculated for each 20 minute dataset of 12000 data records.",,,
FDCHP_A,PFID195,fdc_fluxmom_alongwind_FDCHP_A,fdc_fluxmom_alongwind,FDCHP,A,PythonFunction,fdc_fluxmom_alongwind,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates FLUXMOM-U_L2, the along-wind component of the momentum flux, from the FDCHP instrument, which collects 20 minutes of data every hour. There is one FLUXMOM-U_L2 value calculated for each 20 minute dataset of 12000 data records.",,,
FDCHP_A,PFID196,fdc_fluxmom_crosswind_FDCHP_A,fdc_fluxmom_crosswind,FDCHP,A,PythonFunction,fdc_fluxmom_crosswind,ion_functions.data.fdc_functions,"['timestamp', 'sonicU', 'sonicV', 'sonicW', 'heading', 'rateX', 'rateY', 'rateZ', 'accX', 'accY', 'accZ', 'lat']",,"Calculates FLUXMOM-V_L2, the cross-wind component of the momentum flux, from the FDCHP instrument, which collects 20 minutes of data every hour. There is one FLUXMOM-V_L2 value calculated for each 20 minute dataset of 12000 data records.",,,
FDCHP_A,PFID197,fdc_time_L1_FDCHP_A,fdc_time_L1,FDCHP,A,PythonFunction,fdc_time_L1,ion_functions.data.fdc_functions,['timestamp'],,"Calculates the time metadata product TIME_L1-AUX associated with the L1 wind and temperature data products from the FDCHP instrument, which collects 20 minutes of data every hour. For each of the L1 data products, 30 seconds of data is stripped out from the beginning and end of each 20 minute, 12000 record dataset. The TIME_L1-AUX values are the remaining timestamps for each dataset.",,,
FDCHP_A,PFID198,fdc_time_L2_FDCHP_A,fdc_time_L2,FDCHP,A,PythonFunction,fdc_time_L2,ion_functions.data.fdc_functions,['timestamp'],,"Calculates the time metadata product TIME_L2-AUX associated with the L2 flux data products from the FDCHP instrument. FDCHP collects 20 minutes of data every hour; for each of the L2 flux data products, one data value is calculated for each 20 minute dataset. The TIME_L2-AUX values are the median timestamps for each dataset.",,,
DOSTA_D,PFID199,dosta_Topt_volt_to_degC_DOSTA_D,dosta_Topt_volt_to_degC,DOSTA,D,PythonFunction,dosta_Topt_volt_to_degC,ion_functions.data.do2_functions,['T_optode_volt'],,"Computes T_optode [degC], the DOSTA foil temperature as measured by its internal thermistor, from the analog output of a DOSTA Aanderaa Optode connected to a SBE CTD's 0-5 volt analog data channel.",,,
DOSTA_D,PFID200,dosta_phase_volt_to_degree_DOSTA_D,dosta_phase_volt_to_degree,DOSTA,D,PythonFunction,dosta_phase_volt_to_degree,ion_functions.data.do2_functions,['phase_volt'],,"Computes the DOCONCS-DEG_L0 data product from DOCONCS-VLT_L0, the analog output of a DOSTA Aanderaa Optode connected to a SBE CTD's 0-5 volt analog data channel.",,,
ADCP,PFID201,adcp_bin_depths_dapa_ADCP_PD0,adcp_bin_depths_dapa,ADCP,PD0,PythonFunction,adcp_bin_depths_dapa,ion_functions.data.adcp_functions,"['dist_first_bin', 'bin_size', 'num_bins', 'pressure', 'adcp_orientation', 'latitude']",,Calculates the center bin depths for PD0 and PD12 ADCP data. As defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
ADCP,PFID202,adcp_bin_depths_bar_ADCP_PD0,adcp_bin_depths_bar,ADCP,PD0,PythonFunction,adcp_bin_depths_bar,ion_functions.data.adcp_functions,"['dist_first_bin', 'bin_size', 'num_bins', 'pressure', 'adcp_orientation', 'latitude']",,Calculates the center bin depths for PD0 and PD12 ADCP data. As defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
ADCP,PFID203,adcp_bin_depths_pd8_ADCP_PD8,adcp_bin_depths_pd8,ADCP,PD8,PythonFunction,adcp_bin_depths_meters,ion_functions.data.adcp_functions,"['dist_first_bin', 'bin_size', 'num_bins', 'sensor_depth', 'adcp_orientation']",,Calculates the center bin depths for PD8 ADCP data. As defined in the Data Product Specification for Velocity Profile and Echo Intensity - DCN 1341-00750.,,,
CTD,PFID204,sci_water_pressure_dbar_CTDGV_M,sci_water_pressure_dbar,CTDGV,M,PythonFunction,ctd_glider_preswat,ion_functions.data.ctd_functions,['pr_bar'],,Scale pressure from bar to dbar.,,,
CTDMO,PFID205,ctd_sbe37im_tempwat_instrument_recovered_CTDMO_ALL,ctd_sbe37im_tempwat_instrument_recovered,CTDMO,ALL,PythonFunction,ctd_sbe37im_preswat_instrument_recovered,ion_functions.data.ctd_functions,"['p0', 'pt0', 'ptempa0', 'ptempa1', 'ptempa2', 'ptca0', 'ptca1', 'ptca2', 'ptcb0', 'ptcb1', 'ptcb2', 'pa0', 'pa1', 'pa2']",,Compute the L1 PRESWAT data product from the SBE37IM CTD instruments,,,
CTDMO,PFID206,ctd_sbe37im_condwat_instrument_recovered_CTDMO_ALL,ctd_sbe37im_condwat_instrument_recovered,CTDMO,ALL,PythonFunction,ctd_sbe37im_tempwat_instrument_recovered,ion_functions.data.ctd_functions,"['t0', 'a0', 'a1', 'a2', 'a3']",,Compute the L1 TEMPWAT data product from the SBE37IM CTD instruments,,,
CTDMO,PFID207,ctd_sbe37im_preswat_instrument_recovered_CTDMO_ALL,ctd_sbe37im_preswat_instrument_recovered,CTDMO,ALL,PythonFunction,ctd_sbe37im_condwat_instrument_recovered,ion_functions.data.ctd_functions,"['c0', 't1', 'p1', 'g', 'h', 'i', 'j', 'cpcor', 'ctcor', 'wbotc']",,Compute the L1 CONDWAT data product from the SBE37IM CTD instruments,,,
